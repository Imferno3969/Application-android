package com.example.sae302;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.InetAddress;

public class ServerActivity extends AppCompatActivity {

    // Déclaration des éléments de l'interface utilisateur
    private Button buttonStartServer;
    private TextView textViewIPAddress;
    private TextView textViewPort;
    private Button buttonBackToMain;
    private TextView textViewServerStatus;
    private TextView textViewReceivedMessages; // Déclaration de la TextView pour afficher les messages reçus

    // Variables pour le serveur
    private boolean serverRunning = false;
    private ServerSocket serverSocket;
    private boolean firstConnection = true;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_server);

        // Liaison des éléments de l'interface utilisateur avec les vues XML
        buttonStartServer = findViewById(R.id.buttonStartServer);
        textViewIPAddress = findViewById(R.id.textViewIPAddress);
        textViewPort = findViewById(R.id.textViewPort);
        buttonBackToMain = findViewById(R.id.buttonBackToMain);
        textViewServerStatus = findViewById(R.id.textViewServerStatus);
        textViewReceivedMessages = findViewById(R.id.textViewReceivedMessages); // Initialisation de la TextView pour afficher les messages reçus

        // Définition des écouteurs pour les boutons
        buttonStartServer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!serverRunning) {
                    startServer(); // Démarrer le serveur
                }
            }
        });

        buttonBackToMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish(); // Fermer l'activité pour revenir à l'activité principale
            }
        });
    }

    // Fonction pour démarrer le serveur
    private void startServer() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    serverSocket = new ServerSocket(0); // Création d'une socket serveur sur un port disponible
                    serverRunning = true;

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            textViewIPAddress.setText("Adresse IP serveur : " + getLocalIpAddress());
                            textViewPort.setText("Port serveur : " + serverSocket.getLocalPort());
                            textViewServerStatus.setText("Statut du serveur : en ligne...");
                        }
                    });

                    while (serverRunning) {
                        Socket clientSocket = serverSocket.accept(); // Attente d'une connexion client
                        // Création d'un nouveau thread pour gérer chaque client
                        Thread clientThread = new Thread(new ClientHandler(clientSocket));
                        clientThread.start();

                        // Affichage d'une notification lorsque le client se connecte
                        final String clientAddress = clientSocket.getInetAddress().getHostAddress();
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                textViewReceivedMessages.append("Client connecté: " + clientAddress + "\n");
                            }
                        });
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    closeServerSocket(); // Fermeture de la socket serveur
                }
            }
        }).start();
    }

    // Fonction pour fermer la socket serveur
    private void closeServerSocket() {
        try {
            if (serverSocket != null && !serverSocket.isClosed()) {
                serverSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Fonction pour obtenir l'adresse IP locale du périphérique
    private String getLocalIpAddress() {
        try {
            InetAddress inetAddress = getWifiInetAddress();
            if (inetAddress != null) {
                return inetAddress.getHostAddress();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    // Fonction pour obtenir l'adresse IP locale via la connexion Wi-Fi
    private InetAddress getWifiInetAddress() {
        android.net.wifi.WifiManager wifiManager = (android.net.wifi.WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        android.net.DhcpInfo dhcpInfo = wifiManager.getDhcpInfo();
        if (dhcpInfo != null) {
            int ip = dhcpInfo.ipAddress;
            try {
                return InetAddress.getByAddress(new byte[]{(byte) (ip & 0xff), (byte) (ip >> 8 & 0xff), (byte) (ip >> 16 & 0xff), (byte) (ip >> 24 & 0xff)});
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    // Classe interne pour gérer chaque client dans un thread séparé
    private class ClientHandler implements Runnable {
        private Socket clientSocket;

        public ClientHandler(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }

        @Override
        public void run() {
            BufferedReader inputReader = null;
            try {
                inputReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                final String clientAddress = clientSocket.getInetAddress().getHostAddress();

                while (serverRunning) {
                    final String receivedMessage = inputReader.readLine();
                    if (receivedMessage != null) {
                        // Vérifier si le message commence par '[' ou '{'
                        if (receivedMessage.trim().startsWith("[") || receivedMessage.trim().startsWith("{")) {
                            // Ignorer le traitement de ce message, car il est dans un format spécial
                            continue;
                        } else if (receivedMessage.trim().startsWith("\"")) {
                            // Supprimer tous les caractères '"' du message
                            final String modifiedMessage = receivedMessage.replaceAll("\"", "");
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textViewReceivedMessages.append(clientAddress + " : " + modifiedMessage + "\n");
                                }
                            });
                        } else {
                            // Supprimer tous les caractères '{', '}', ';', et ',' du message
                            final String modifiedMessage = receivedMessage.replaceAll("[{};,]", "");
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textViewReceivedMessages.append(clientAddress + " : " + modifiedMessage + "\n");
                                }
                            });
                        }
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (inputReader != null) {
                        inputReader.close();
                    }
                    if (clientSocket != null && !clientSocket.isClosed()) {
                        clientSocket.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }
}
